<script>
        //1.Array.concat()方法创建并返回一个新数组，它的元素包括调用concat()的原始数组的元素和concat()的每个参数。
        //concat()不会递归扁平化数组的数组，concat()也不会修改调用的数组
        var a = [1,2,3]
        console.log(a.concat(4,5))          //[1, 2, 3, 4, 5]
        console.log(a.concat([4,5]))        //[1, 2, 3, 4, 5]
        console.log(a.concat([4,5],[6,7]))  //[1, 2, 3, 4, 5, 6, 7]
        console.log(a.concat(4,[5,[6,7]]))  //[1, 2, 3, 4, 5, Array(2)]
        // 0: 1
        // 1: 2
        // 2: 3
        // 3: 4
        // 4: 5
        // 5: Array(2)
        // 0: 6
        // 1: 7

        //2.Array.slice()方法返回指定数组的一个片段或者子数组，它的两个参数分别制定了片段的开始和结束的位置
        //返回的数组包含第一个参数指定的位置和所有到但不含第二个参数指定的位置之间的所有数组元素
        //如果参数中出现了负数，他表示相对于数组中最后一个元素的位置，-1制定了最有一个元素，-3指定了倒数第三个元素
        //slice()不会修改调用的数组
        var a = [1,2,3,4,5]
        console.log(a.slice(0,3));      //[1, 2, 3]
        console.log(a.slice(3))         //[4, 5]
        console.log(a.slice(1,-1))      //[2, 3, 4]
        console.log(a.slice(-3,-2))     //[3]

        //3.Array.splice()方法是在数组中插入或删除元素的通用方法，splice()会修改调用的数组
        //splice()能够从数组中删除元素，插入元素到数组中或者同时完成这两种操作，在插入或者删除点之后的数组元素会根据需要增加
        //或减小它们的索引值，因此数组的其他部分仍然保持连续的
        //splice()的第一个参数指定了插入和删除的起始位置，第二个参数指定了应该从数组中删除的元素的个数
        //如果省略第二个参数，从起始点开始到数组结尾的所有元素将被删除。splice()返回一个由删除元素组成的数组，或者没有删除元素就返回一个空数组
        var a = [1,2,3,4,5,6,7,8]
        console.log(a.splice(4));       //[5, 6, 7, 8]:删除了[5，6，7，8],因为修改原数组，所有现在a:[1,2,3,4]
        console.log(a.splice(1,2));     //[2, 3]:删除了2，3；所有现在a:[1,4]
        console.log(a.splice(1,1))      //[4]:删除了[4],a还剩:[1]
        console.log(a.splice(0))        //[1]：删除[1],a为空数组了
        console.log(a)                  //[],数组被改变了

        //splice()的前两个参数指定了需要删除的数组元素
        var a = [1,2,3,4,5];
        console.log(a.splice(2,0,'a','b'));     //[]
        console.log(a)                          //[1,2,"a","b",3,4,5]
        console.log(a.splice(2,2,[1,2],3))      //["a","b"]
        console.log(a)                          //[1,2,[1,2],3,3,4,5]

        //4.push()和pop()允许数组当做栈来使用，push()在数组的尾部添加一个或多个元素，并返回新数组新的长度
        //pop()则相反，它删除数组的最后一个元素，减小数组的长度并返回它删除的值。
        //两个方法都修改并替换原始数组而并非生成一个修改版的新数组
        //组合使用push()和pop()能够用js实现先进先出的栈
        var stack = [];
        console.log(stack.push(1,2));   //2:数组的长度
        console.log(stack)              //[1,2]
        console.log(stack.pop())        //2:删除的元素2
        console.log(stack)              //[1]
        console.log(stack.push(3))      //2
        console.log(stack.pop())        //3
        console.log(stack.push(4,5))    //3
        console.log(stack.pop())        //5
        console.log(stack.pop())        //4

        //5.toString()将数组每个元素转化为字符串，并且输出用逗号分隔的字符串列表
        console.log([1,2,3].toString())     //"1,2,3"
    </script>
